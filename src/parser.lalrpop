// -*- Rust -*-

use std::str::FromStr;
use crate::sxp::ast::{self, AST};
use crate::sxp::string;

grammar;

Int: i32 = <s:INT> => i32::from_str(s).unwrap();
Float: f32 = <s:FLOAT> => f32::from_str(s).unwrap();
String: String = <s:STRING> => {
  let t = &s[1..s.chars().count()-1];
  string::parse_escapes(t).unwrap()
};
Symbol: String = <s:SYMBOL> => String::from(s);

// TODO I want to be able to recognize symbols like 1b or a.b. I think
// I'll have to write my own custom lexer to do so.
match {
  "#t", "#f",
  r"[+-]?[0-9]+" => INT,
  r"[+-]?[0-9]+((\.[0-9]+)([eE][+-]?[0-9]+)?|(\.[0-9]+)?([eE][+-]?[0-9]+))" => FLOAT,
  r#""([^\\"]|\\[\\"])*""# => STRING,
  "(", ")", ".", "[", "]", "'", "#'", "`", ",", ":", "V{", "}"
} else {
  // Currently reserved but unused: ;
  r"[A-Za-z_~+=\-\\!@$%^&*<>/][A-Za-z0-9_~+=\-\\!@$%^&*<>/]*" => SYMBOL,
}

pub AST: AST = {
  <ast: LiteralOrNestedAST> => ast,
  "'" <body: AST> => ast::list(vec!(AST::Symbol(String::from("quote")), body)),
  "#'" <body: AST> => ast::list(vec!(AST::Symbol(String::from("function")), body)),
  "`" <body: AST> => ast::list(vec!(AST::Symbol(String::from("quasiquote")), body)),
  "," <body: AST> => ast::list(vec!(AST::Symbol(String::from("unquote")), body)),
}

pub SomeAST: AST = {
  <one: AST> => ast::cons(one, AST::Nil),
  <first: AST> <rest: SomeAST> => ast::cons(first, rest),
}

// This is here to fix an ambiguity with the grammar. Specifically, I
// want ' a : b to parse as (quote (access-slot a b)), not
// (access-slot (quote a) b). There is never a use case where the
// latter would be helpful, as (quote a) has no GDScript-only slots on
// it. The same applies to function and quasiquote. unquote is a bit
// more nebulous, as there are use cases for either possible parse of
// ,a:b, but I'm treating it the same as the other three for now.
pub LiteralOrNestedAST: AST = {
  "#t" => AST::Bool(true),
  "#f" => AST::Bool(false),
  <i: Int> => AST::Int(i),
  <f: Float> => AST::Float(f.into()),
  <s: String> => AST::String(s), // TODO Escaping
  <s: Symbol> => AST::Symbol(s),
  "(" ")" => AST::Nil,
  "(" <car: AST> <cdr: Cdr> ")" => AST::Cons(Box::new(car), Box::new(cdr)),
  "[" <contents: ArrayContents> "]" => AST::Array(contents),
  "V{" <x: AST> <y: AST> "}" => AST::Vector2(Box::new(x), Box::new(y)),
  "V{" <x: AST> <y: AST> <z: AST> "}" => AST::Vector3(Box::new(x), Box::new(y), Box::new(z)),
  <body: LiteralOrNestedAST> ":" <name: Symbol> => ast::list(vec!(AST::Symbol(String::from("access-slot")), body, AST::Symbol(name))),
}

Cdr: AST = {
  => AST::Nil,
  "." <cdr: AST> => cdr,
  <cadr: AST> <cddr: Cdr> => AST::Cons(Box::new(cadr), Box::new(cddr)),
}

ArrayContents: Vec<AST> = {
  => vec!(),
  <mut init: ArrayContents> <last: AST> => {
    init.push(last);
    init
  }
}
