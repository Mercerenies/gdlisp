
//! This module provides several helpers for syntactic forms which
//! need to be special-cased in the parser.
//!
//! This includes forms such as `(quote x)`, which is generated by the
//! `'x` syntax.

use super::ast::{AST, ASTF};
use crate::pipeline::source::SourceOffset;

/// Produces an arbitrary syntactic expression of the form `(a b)`,
/// where `a` is a symbol and `b` is an arbitrary [`AST`].
pub fn unary(head: &str, value: AST, pos: SourceOffset) -> AST {
  AST::list(vec!(
    AST::symbol(head, pos),
    value
  ), pos)
}

/// Produces the syntactic form `(quote value)`.
pub fn quote(value: AST, pos: SourceOffset) -> AST {
  unary("quote", value, pos)
}

/// Produces the syntactic form `(function value)`.
pub fn function(value: AST, pos: SourceOffset) -> AST {
  unary("function", value, pos)
}

/// Produces the syntactic form `(quasiquote value)`.
pub fn quasiquote(value: AST, pos: SourceOffset) -> AST {
  unary("quasiquote", value, pos)
}

/// Produces the syntactic form `(unquote value)`.
pub fn unquote(value: AST, pos: SourceOffset) -> AST {
  unary("unquote", value, pos)
}

/// Produces the syntactic form `(unquote-spliced value)`.
pub fn unquote_spliced(value: AST, pos: SourceOffset) -> AST {
  unary("unquote-spliced", value, pos)
}
